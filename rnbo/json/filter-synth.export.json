{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeNumber",
        "index": 0,
        "name": "n",
        "paramId": "n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s04",
        "constrainFunc": "param_17_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 1,
        "name": "lag",
        "paramId": "lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s05",
        "constrainFunc": "param_18_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 2,
        "name": "osc",
        "paramId": "osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s15",
        "constrainFunc": "param_19_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 3,
        "name": "res",
        "paramId": "res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s14",
        "constrainFunc": "param_20_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 4,
        "name": "vol",
        "paramId": "vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s16",
        "constrainFunc": "param_21_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 5,
        "name": "drift",
        "paramId": "drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s18",
        "constrainFunc": "param_22_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 6,
        "name": "pan",
        "paramId": "pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s03",
        "constrainFunc": "param_23_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 7,
        "name": "r",
        "paramId": "r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s10",
        "constrainFunc": "param_24_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 8,
        "name": "s",
        "paramId": "s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s11",
        "constrainFunc": "param_25_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 9,
        "name": "d",
        "paramId": "d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s12",
        "constrainFunc": "param_26_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 10,
        "name": "a",
        "paramId": "a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s13",
        "constrainFunc": "param_27_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 11,
        "name": "modr",
        "paramId": "modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s06",
        "constrainFunc": "param_28_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 12,
        "name": "mods",
        "paramId": "mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s07",
        "constrainFunc": "param_29_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 13,
        "name": "modd",
        "paramId": "modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s08",
        "constrainFunc": "param_30_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 14,
        "name": "moda",
        "paramId": "moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s09",
        "constrainFunc": "param_31_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 15,
        "name": "cutoff",
        "paramId": "cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s02",
        "constrainFunc": "param_32_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 16,
        "name": "1/n",
        "paramId": "poly/1/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 17,
        "name": "2/n",
        "paramId": "poly/2/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 18,
        "name": "3/n",
        "paramId": "poly/3/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 19,
        "name": "4/n",
        "paramId": "poly/4/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 20,
        "name": "5/n",
        "paramId": "poly/5/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 21,
        "name": "6/n",
        "paramId": "poly/6/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 22,
        "name": "7/n",
        "paramId": "poly/7/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 23,
        "name": "8/n",
        "paramId": "poly/8/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 24,
        "name": "9/n",
        "paramId": "poly/9/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 25,
        "name": "10/n",
        "paramId": "poly/10/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 26,
        "name": "11/n",
        "paramId": "poly/11/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 27,
        "name": "12/n",
        "paramId": "poly/12/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 28,
        "name": "13/n",
        "paramId": "poly/13/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 29,
        "name": "14/n",
        "paramId": "poly/14/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 30,
        "name": "15/n",
        "paramId": "poly/15/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 31,
        "name": "16/n",
        "paramId": "poly/16/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s03",
        "constrainFunc": "param_33_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 32,
        "name": "1/lag",
        "paramId": "poly/1/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 33,
        "name": "2/lag",
        "paramId": "poly/2/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 34,
        "name": "3/lag",
        "paramId": "poly/3/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 35,
        "name": "4/lag",
        "paramId": "poly/4/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 36,
        "name": "5/lag",
        "paramId": "poly/5/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 37,
        "name": "6/lag",
        "paramId": "poly/6/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 38,
        "name": "7/lag",
        "paramId": "poly/7/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 39,
        "name": "8/lag",
        "paramId": "poly/8/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 40,
        "name": "9/lag",
        "paramId": "poly/9/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 41,
        "name": "10/lag",
        "paramId": "poly/10/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 42,
        "name": "11/lag",
        "paramId": "poly/11/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 43,
        "name": "12/lag",
        "paramId": "poly/12/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 44,
        "name": "13/lag",
        "paramId": "poly/13/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 45,
        "name": "14/lag",
        "paramId": "poly/14/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 46,
        "name": "15/lag",
        "paramId": "poly/15/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 47,
        "name": "16/lag",
        "paramId": "poly/16/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s04",
        "constrainFunc": "param_34_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 48,
        "name": "1/osc",
        "paramId": "poly/1/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 49,
        "name": "2/osc",
        "paramId": "poly/2/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 50,
        "name": "3/osc",
        "paramId": "poly/3/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 51,
        "name": "4/osc",
        "paramId": "poly/4/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 52,
        "name": "5/osc",
        "paramId": "poly/5/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 53,
        "name": "6/osc",
        "paramId": "poly/6/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 54,
        "name": "7/osc",
        "paramId": "poly/7/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 55,
        "name": "8/osc",
        "paramId": "poly/8/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 56,
        "name": "9/osc",
        "paramId": "poly/9/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 57,
        "name": "10/osc",
        "paramId": "poly/10/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 58,
        "name": "11/osc",
        "paramId": "poly/11/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 59,
        "name": "12/osc",
        "paramId": "poly/12/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 60,
        "name": "13/osc",
        "paramId": "poly/13/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 61,
        "name": "14/osc",
        "paramId": "poly/14/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 62,
        "name": "15/osc",
        "paramId": "poly/15/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 63,
        "name": "16/osc",
        "paramId": "poly/16/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s14",
        "constrainFunc": "param_35_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 64,
        "name": "1/res",
        "paramId": "poly/1/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 65,
        "name": "2/res",
        "paramId": "poly/2/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 66,
        "name": "3/res",
        "paramId": "poly/3/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 67,
        "name": "4/res",
        "paramId": "poly/4/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 68,
        "name": "5/res",
        "paramId": "poly/5/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 69,
        "name": "6/res",
        "paramId": "poly/6/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 70,
        "name": "7/res",
        "paramId": "poly/7/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 71,
        "name": "8/res",
        "paramId": "poly/8/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 72,
        "name": "9/res",
        "paramId": "poly/9/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 73,
        "name": "10/res",
        "paramId": "poly/10/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 74,
        "name": "11/res",
        "paramId": "poly/11/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 75,
        "name": "12/res",
        "paramId": "poly/12/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 76,
        "name": "13/res",
        "paramId": "poly/13/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 77,
        "name": "14/res",
        "paramId": "poly/14/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 78,
        "name": "15/res",
        "paramId": "poly/15/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 79,
        "name": "16/res",
        "paramId": "poly/16/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s13",
        "constrainFunc": "param_36_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 80,
        "name": "1/vol",
        "paramId": "poly/1/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 81,
        "name": "2/vol",
        "paramId": "poly/2/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 82,
        "name": "3/vol",
        "paramId": "poly/3/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 83,
        "name": "4/vol",
        "paramId": "poly/4/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 84,
        "name": "5/vol",
        "paramId": "poly/5/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 85,
        "name": "6/vol",
        "paramId": "poly/6/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 86,
        "name": "7/vol",
        "paramId": "poly/7/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 87,
        "name": "8/vol",
        "paramId": "poly/8/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 88,
        "name": "9/vol",
        "paramId": "poly/9/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 89,
        "name": "10/vol",
        "paramId": "poly/10/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 90,
        "name": "11/vol",
        "paramId": "poly/11/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 91,
        "name": "12/vol",
        "paramId": "poly/12/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 92,
        "name": "13/vol",
        "paramId": "poly/13/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 93,
        "name": "14/vol",
        "paramId": "poly/14/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 94,
        "name": "15/vol",
        "paramId": "poly/15/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 95,
        "name": "16/vol",
        "paramId": "poly/16/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s15",
        "constrainFunc": "param_37_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 96,
        "name": "1/drift",
        "paramId": "poly/1/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 97,
        "name": "2/drift",
        "paramId": "poly/2/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 98,
        "name": "3/drift",
        "paramId": "poly/3/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 99,
        "name": "4/drift",
        "paramId": "poly/4/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 100,
        "name": "5/drift",
        "paramId": "poly/5/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 101,
        "name": "6/drift",
        "paramId": "poly/6/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 102,
        "name": "7/drift",
        "paramId": "poly/7/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 103,
        "name": "8/drift",
        "paramId": "poly/8/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 104,
        "name": "9/drift",
        "paramId": "poly/9/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 105,
        "name": "10/drift",
        "paramId": "poly/10/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 106,
        "name": "11/drift",
        "paramId": "poly/11/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 107,
        "name": "12/drift",
        "paramId": "poly/12/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 108,
        "name": "13/drift",
        "paramId": "poly/13/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 109,
        "name": "14/drift",
        "paramId": "poly/14/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 110,
        "name": "15/drift",
        "paramId": "poly/15/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 111,
        "name": "16/drift",
        "paramId": "poly/16/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s17",
        "constrainFunc": "param_38_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 112,
        "name": "1/pan",
        "paramId": "poly/1/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 113,
        "name": "2/pan",
        "paramId": "poly/2/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 114,
        "name": "3/pan",
        "paramId": "poly/3/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 115,
        "name": "4/pan",
        "paramId": "poly/4/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 116,
        "name": "5/pan",
        "paramId": "poly/5/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 117,
        "name": "6/pan",
        "paramId": "poly/6/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 118,
        "name": "7/pan",
        "paramId": "poly/7/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 119,
        "name": "8/pan",
        "paramId": "poly/8/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 120,
        "name": "9/pan",
        "paramId": "poly/9/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 121,
        "name": "10/pan",
        "paramId": "poly/10/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 122,
        "name": "11/pan",
        "paramId": "poly/11/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 123,
        "name": "12/pan",
        "paramId": "poly/12/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 124,
        "name": "13/pan",
        "paramId": "poly/13/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 125,
        "name": "14/pan",
        "paramId": "poly/14/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 126,
        "name": "15/pan",
        "paramId": "poly/15/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 127,
        "name": "16/pan",
        "paramId": "poly/16/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s02",
        "constrainFunc": "param_39_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 128,
        "name": "1/r",
        "paramId": "poly/1/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 129,
        "name": "2/r",
        "paramId": "poly/2/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 130,
        "name": "3/r",
        "paramId": "poly/3/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 131,
        "name": "4/r",
        "paramId": "poly/4/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 132,
        "name": "5/r",
        "paramId": "poly/5/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 133,
        "name": "6/r",
        "paramId": "poly/6/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 134,
        "name": "7/r",
        "paramId": "poly/7/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 135,
        "name": "8/r",
        "paramId": "poly/8/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 136,
        "name": "9/r",
        "paramId": "poly/9/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 137,
        "name": "10/r",
        "paramId": "poly/10/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 138,
        "name": "11/r",
        "paramId": "poly/11/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 139,
        "name": "12/r",
        "paramId": "poly/12/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 140,
        "name": "13/r",
        "paramId": "poly/13/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 141,
        "name": "14/r",
        "paramId": "poly/14/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 142,
        "name": "15/r",
        "paramId": "poly/15/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 143,
        "name": "16/r",
        "paramId": "poly/16/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s09",
        "constrainFunc": "param_40_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 144,
        "name": "1/s",
        "paramId": "poly/1/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 145,
        "name": "2/s",
        "paramId": "poly/2/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 146,
        "name": "3/s",
        "paramId": "poly/3/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 147,
        "name": "4/s",
        "paramId": "poly/4/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 148,
        "name": "5/s",
        "paramId": "poly/5/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 149,
        "name": "6/s",
        "paramId": "poly/6/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 150,
        "name": "7/s",
        "paramId": "poly/7/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 151,
        "name": "8/s",
        "paramId": "poly/8/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 152,
        "name": "9/s",
        "paramId": "poly/9/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 153,
        "name": "10/s",
        "paramId": "poly/10/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 154,
        "name": "11/s",
        "paramId": "poly/11/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 155,
        "name": "12/s",
        "paramId": "poly/12/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 156,
        "name": "13/s",
        "paramId": "poly/13/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 157,
        "name": "14/s",
        "paramId": "poly/14/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 158,
        "name": "15/s",
        "paramId": "poly/15/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 159,
        "name": "16/s",
        "paramId": "poly/16/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s10",
        "constrainFunc": "param_41_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 160,
        "name": "1/d",
        "paramId": "poly/1/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 161,
        "name": "2/d",
        "paramId": "poly/2/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 162,
        "name": "3/d",
        "paramId": "poly/3/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 163,
        "name": "4/d",
        "paramId": "poly/4/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 164,
        "name": "5/d",
        "paramId": "poly/5/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 165,
        "name": "6/d",
        "paramId": "poly/6/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 166,
        "name": "7/d",
        "paramId": "poly/7/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 167,
        "name": "8/d",
        "paramId": "poly/8/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 168,
        "name": "9/d",
        "paramId": "poly/9/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 169,
        "name": "10/d",
        "paramId": "poly/10/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 170,
        "name": "11/d",
        "paramId": "poly/11/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 171,
        "name": "12/d",
        "paramId": "poly/12/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 172,
        "name": "13/d",
        "paramId": "poly/13/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 173,
        "name": "14/d",
        "paramId": "poly/14/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 174,
        "name": "15/d",
        "paramId": "poly/15/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 175,
        "name": "16/d",
        "paramId": "poly/16/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s11",
        "constrainFunc": "param_42_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 176,
        "name": "1/a",
        "paramId": "poly/1/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 177,
        "name": "2/a",
        "paramId": "poly/2/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 178,
        "name": "3/a",
        "paramId": "poly/3/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 179,
        "name": "4/a",
        "paramId": "poly/4/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 180,
        "name": "5/a",
        "paramId": "poly/5/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 181,
        "name": "6/a",
        "paramId": "poly/6/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 182,
        "name": "7/a",
        "paramId": "poly/7/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 183,
        "name": "8/a",
        "paramId": "poly/8/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 184,
        "name": "9/a",
        "paramId": "poly/9/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 185,
        "name": "10/a",
        "paramId": "poly/10/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 186,
        "name": "11/a",
        "paramId": "poly/11/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 187,
        "name": "12/a",
        "paramId": "poly/12/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 188,
        "name": "13/a",
        "paramId": "poly/13/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 189,
        "name": "14/a",
        "paramId": "poly/14/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 190,
        "name": "15/a",
        "paramId": "poly/15/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 191,
        "name": "16/a",
        "paramId": "poly/16/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s12",
        "constrainFunc": "param_43_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 192,
        "name": "1/modr",
        "paramId": "poly/1/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 193,
        "name": "2/modr",
        "paramId": "poly/2/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 194,
        "name": "3/modr",
        "paramId": "poly/3/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 195,
        "name": "4/modr",
        "paramId": "poly/4/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 196,
        "name": "5/modr",
        "paramId": "poly/5/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 197,
        "name": "6/modr",
        "paramId": "poly/6/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 198,
        "name": "7/modr",
        "paramId": "poly/7/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 199,
        "name": "8/modr",
        "paramId": "poly/8/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 200,
        "name": "9/modr",
        "paramId": "poly/9/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 201,
        "name": "10/modr",
        "paramId": "poly/10/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 202,
        "name": "11/modr",
        "paramId": "poly/11/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 203,
        "name": "12/modr",
        "paramId": "poly/12/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 204,
        "name": "13/modr",
        "paramId": "poly/13/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 205,
        "name": "14/modr",
        "paramId": "poly/14/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 206,
        "name": "15/modr",
        "paramId": "poly/15/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 207,
        "name": "16/modr",
        "paramId": "poly/16/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s05",
        "constrainFunc": "param_44_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 208,
        "name": "1/mods",
        "paramId": "poly/1/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 209,
        "name": "2/mods",
        "paramId": "poly/2/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 210,
        "name": "3/mods",
        "paramId": "poly/3/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 211,
        "name": "4/mods",
        "paramId": "poly/4/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 212,
        "name": "5/mods",
        "paramId": "poly/5/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 213,
        "name": "6/mods",
        "paramId": "poly/6/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 214,
        "name": "7/mods",
        "paramId": "poly/7/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 215,
        "name": "8/mods",
        "paramId": "poly/8/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 216,
        "name": "9/mods",
        "paramId": "poly/9/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 217,
        "name": "10/mods",
        "paramId": "poly/10/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 218,
        "name": "11/mods",
        "paramId": "poly/11/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 219,
        "name": "12/mods",
        "paramId": "poly/12/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 220,
        "name": "13/mods",
        "paramId": "poly/13/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 221,
        "name": "14/mods",
        "paramId": "poly/14/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 222,
        "name": "15/mods",
        "paramId": "poly/15/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 223,
        "name": "16/mods",
        "paramId": "poly/16/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s06",
        "constrainFunc": "param_45_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 224,
        "name": "1/modd",
        "paramId": "poly/1/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 225,
        "name": "2/modd",
        "paramId": "poly/2/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 226,
        "name": "3/modd",
        "paramId": "poly/3/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 227,
        "name": "4/modd",
        "paramId": "poly/4/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 228,
        "name": "5/modd",
        "paramId": "poly/5/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 229,
        "name": "6/modd",
        "paramId": "poly/6/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 230,
        "name": "7/modd",
        "paramId": "poly/7/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 231,
        "name": "8/modd",
        "paramId": "poly/8/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 232,
        "name": "9/modd",
        "paramId": "poly/9/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 233,
        "name": "10/modd",
        "paramId": "poly/10/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 234,
        "name": "11/modd",
        "paramId": "poly/11/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 235,
        "name": "12/modd",
        "paramId": "poly/12/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 236,
        "name": "13/modd",
        "paramId": "poly/13/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 237,
        "name": "14/modd",
        "paramId": "poly/14/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 238,
        "name": "15/modd",
        "paramId": "poly/15/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 239,
        "name": "16/modd",
        "paramId": "poly/16/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s07",
        "constrainFunc": "param_46_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 240,
        "name": "1/moda",
        "paramId": "poly/1/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 241,
        "name": "2/moda",
        "paramId": "poly/2/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 242,
        "name": "3/moda",
        "paramId": "poly/3/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 243,
        "name": "4/moda",
        "paramId": "poly/4/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 244,
        "name": "5/moda",
        "paramId": "poly/5/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 245,
        "name": "6/moda",
        "paramId": "poly/6/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 246,
        "name": "7/moda",
        "paramId": "poly/7/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 247,
        "name": "8/moda",
        "paramId": "poly/8/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 248,
        "name": "9/moda",
        "paramId": "poly/9/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 249,
        "name": "10/moda",
        "paramId": "poly/10/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 250,
        "name": "11/moda",
        "paramId": "poly/11/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 251,
        "name": "12/moda",
        "paramId": "poly/12/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 252,
        "name": "13/moda",
        "paramId": "poly/13/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 253,
        "name": "14/moda",
        "paramId": "poly/14/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 254,
        "name": "15/moda",
        "paramId": "poly/15/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 255,
        "name": "16/moda",
        "paramId": "poly/16/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s08",
        "constrainFunc": "param_47_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 256,
        "name": "1/cutoff",
        "paramId": "poly/1/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 257,
        "name": "2/cutoff",
        "paramId": "poly/2/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 258,
        "name": "3/cutoff",
        "paramId": "poly/3/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 259,
        "name": "4/cutoff",
        "paramId": "poly/4/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 260,
        "name": "5/cutoff",
        "paramId": "poly/5/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 261,
        "name": "6/cutoff",
        "paramId": "poly/6/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 262,
        "name": "7/cutoff",
        "paramId": "poly/7/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 263,
        "name": "8/cutoff",
        "paramId": "poly/8/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 264,
        "name": "9/cutoff",
        "paramId": "poly/9/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 265,
        "name": "10/cutoff",
        "paramId": "poly/10/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 266,
        "name": "11/cutoff",
        "paramId": "poly/11/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 267,
        "name": "12/cutoff",
        "paramId": "poly/12/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 268,
        "name": "13/cutoff",
        "paramId": "poly/13/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 269,
        "name": "14/cutoff",
        "paramId": "poly/14/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 270,
        "name": "15/cutoff",
        "paramId": "poly/15/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 271,
        "name": "16/cutoff",
        "paramId": "poly/16/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "poly_param_s01",
        "constrainFunc": "param_48_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 272,
        "name": "n",
        "paramId": "poly/n",
        "minimum": 0,
        "maximum": 127,
        "exponent": 1,
        "steps": 0,
        "initialValue": 48,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s03",
        "constrainFunc": "param_01_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 273,
        "name": "lag",
        "paramId": "poly/lag",
        "minimum": 5,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s04",
        "constrainFunc": "param_02_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 274,
        "name": "osc",
        "paramId": "poly/osc",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "sine",
          "saw",
          "tri",
          "pulse",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s14",
        "constrainFunc": "param_03_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 275,
        "name": "res",
        "paramId": "poly/res",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s13",
        "constrainFunc": "param_04_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 276,
        "name": "vol",
        "paramId": "poly/vol",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s15",
        "constrainFunc": "param_05_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 277,
        "name": "drift",
        "paramId": "poly/drift",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s17",
        "constrainFunc": "param_06_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 278,
        "name": "pan",
        "paramId": "poly/pan",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.5,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s02",
        "constrainFunc": "param_07_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 279,
        "name": "r",
        "paramId": "poly/r",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s09",
        "constrainFunc": "param_08_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 280,
        "name": "s",
        "paramId": "poly/s",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s10",
        "constrainFunc": "param_09_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 281,
        "name": "d",
        "paramId": "poly/d",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s11",
        "constrainFunc": "param_10_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 282,
        "name": "a",
        "paramId": "poly/a",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s12",
        "constrainFunc": "param_11_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 283,
        "name": "modr",
        "paramId": "poly/modr",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s05",
        "constrainFunc": "param_12_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 284,
        "name": "mods",
        "paramId": "poly/mods",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s06",
        "constrainFunc": "param_13_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 285,
        "name": "modd",
        "paramId": "poly/modd",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s07",
        "constrainFunc": "param_14_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 286,
        "name": "moda",
        "paramId": "poly/moda",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s08",
        "constrainFunc": "param_15_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 287,
        "name": "cutoff",
        "paramId": "poly/cutoff",
        "minimum": 50,
        "maximum": 20000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20000,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s01",
        "constrainFunc": "param_16_value_constrain"
      }
    ],
    "numParameters": 288,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 2,
    "numMidiInputPorts": 1,
    "numMidiOutputPorts": 0,
    "externalDataRefs": [],
    "patcherSerial": 0,
    "inports": [
      {
        "tag": "cut",
        "meta": ""
      },
      {
        "tag": "status",
        "meta": ""
      }
    ],
    "outports": [
      {
        "tag": "out3",
        "meta": ""
      }
    ],
    "inlets": [
      {
        "type": "midi"
      }
    ],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1",
        "meta": ""
      },
      {
        "type": "signal",
        "index": 2,
        "tag": "out2",
        "meta": ""
      },
      {
        "type": "event",
        "index": 3,
        "tag": "out3",
        "meta": ""
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 3:\n    case 4:\n    case 6:\n    case 8:\n    case 12:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - 0) / (4 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 5);\n            }\n\n            return normalizedValue;\n        }\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 127 ? 127 : value));\n            let normalizedValue = (value - 0) / (127 - 0);\n            return normalizedValue;\n        }\n    case 7:\n    case 9:\n    case 10:\n    case 11:\n    case 13:\n    case 14:\n        {\n            value = (value < 0 ? 0 : (value > 5000 ? 5000 : value));\n            let normalizedValue = (value - 0) / (5000 - 0);\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 5 ? 5 : (value > 5000 ? 5000 : value));\n            let normalizedValue = (value - 5) / (5000 - 5);\n            return normalizedValue;\n        }\n    case 15:\n        {\n            value = (value < 50 ? 50 : (value > 20000 ? 20000 : value));\n            let normalizedValue = (value - 50) / (20000 - 50);\n            return normalizedValue;\n        }\n    default:\n        index -= 16;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 3:\n    case 4:\n    case 6:\n    case 8:\n    case 12:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 5);\n            }\n\n            {\n                return 0 + value * (4 - 0);\n            }\n        }\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (127 - 0);\n            }\n        }\n    case 7:\n    case 9:\n    case 10:\n    case 11:\n    case 13:\n    case 14:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (5000 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 5 + value * (5000 - 5);\n            }\n        }\n    case 15:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 50 + value * (20000 - 50);\n            }\n        }\n    default:\n        index -= 16;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "getNumParameters": "function getNumParameters() {\n    return 16 + this.poly[0].getNumParameters();\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 6:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 7:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 8:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 9:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 10:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 11:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 12:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 13:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 14:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 15:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    default:\n        index -= 16;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].constrainParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "subpatches": {
        "poly": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n    case 58:\n    case 59:\n    case 60:\n    case 61:\n    case 62:\n    case 63:\n    case 64:\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 96:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 128:\n    case 129:\n    case 130:\n    case 131:\n    case 132:\n    case 133:\n    case 134:\n    case 135:\n    case 136:\n    case 137:\n    case 138:\n    case 139:\n    case 140:\n    case 141:\n    case 142:\n    case 143:\n    case 192:\n    case 193:\n    case 194:\n    case 195:\n    case 196:\n    case 197:\n    case 198:\n    case 199:\n    case 200:\n    case 201:\n    case 202:\n    case 203:\n    case 204:\n    case 205:\n    case 206:\n    case 207:\n    case 259:\n    case 260:\n    case 262:\n    case 264:\n    case 268:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 32:\n    case 33:\n    case 34:\n    case 35:\n    case 36:\n    case 37:\n    case 38:\n    case 39:\n    case 40:\n    case 41:\n    case 42:\n    case 43:\n    case 44:\n    case 45:\n    case 46:\n    case 47:\n    case 258:\n        {\n            value = (value < 0 ? 0 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - 0) / (4 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 5);\n            }\n\n            return normalizedValue;\n        }\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 91:\n    case 92:\n    case 93:\n    case 94:\n    case 95:\n    case 261:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 11:\n    case 12:\n    case 13:\n    case 14:\n    case 15:\n    case 256:\n        {\n            value = (value < 0 ? 0 : (value > 127 ? 127 : value));\n            let normalizedValue = (value - 0) / (127 - 0);\n            return normalizedValue;\n        }\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n    case 123:\n    case 124:\n    case 125:\n    case 126:\n    case 127:\n    case 144:\n    case 145:\n    case 146:\n    case 147:\n    case 148:\n    case 149:\n    case 150:\n    case 151:\n    case 152:\n    case 153:\n    case 154:\n    case 155:\n    case 156:\n    case 157:\n    case 158:\n    case 159:\n    case 160:\n    case 161:\n    case 162:\n    case 163:\n    case 164:\n    case 165:\n    case 166:\n    case 167:\n    case 168:\n    case 169:\n    case 170:\n    case 171:\n    case 172:\n    case 173:\n    case 174:\n    case 175:\n    case 176:\n    case 177:\n    case 178:\n    case 179:\n    case 180:\n    case 181:\n    case 182:\n    case 183:\n    case 184:\n    case 185:\n    case 186:\n    case 187:\n    case 188:\n    case 189:\n    case 190:\n    case 191:\n    case 208:\n    case 209:\n    case 210:\n    case 211:\n    case 212:\n    case 213:\n    case 214:\n    case 215:\n    case 216:\n    case 217:\n    case 218:\n    case 219:\n    case 220:\n    case 221:\n    case 222:\n    case 223:\n    case 224:\n    case 225:\n    case 226:\n    case 227:\n    case 228:\n    case 229:\n    case 230:\n    case 231:\n    case 232:\n    case 233:\n    case 234:\n    case 235:\n    case 236:\n    case 237:\n    case 238:\n    case 239:\n    case 263:\n    case 265:\n    case 266:\n    case 267:\n    case 269:\n    case 270:\n        {\n            value = (value < 0 ? 0 : (value > 5000 ? 5000 : value));\n            let normalizedValue = (value - 0) / (5000 - 0);\n            return normalizedValue;\n        }\n    case 16:\n    case 17:\n    case 18:\n    case 19:\n    case 20:\n    case 21:\n    case 22:\n    case 23:\n    case 24:\n    case 25:\n    case 26:\n    case 27:\n    case 28:\n    case 29:\n    case 30:\n    case 31:\n    case 257:\n        {\n            value = (value < 5 ? 5 : (value > 5000 ? 5000 : value));\n            let normalizedValue = (value - 5) / (5000 - 5);\n            return normalizedValue;\n        }\n    case 240:\n    case 241:\n    case 242:\n    case 243:\n    case 244:\n    case 245:\n    case 246:\n    case 247:\n    case 248:\n    case 249:\n    case 250:\n    case 251:\n    case 252:\n    case 253:\n    case 254:\n    case 255:\n    case 271:\n        {\n            value = (value < 50 ? 50 : (value > 20000 ? 20000 : value));\n            let normalizedValue = (value - 50) / (20000 - 50);\n            return normalizedValue;\n        }\n    default:\n        index -= 272;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02[0].getNumParameters()) {\n            {\n                return this.p_02[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n    case 58:\n    case 59:\n    case 60:\n    case 61:\n    case 62:\n    case 63:\n    case 64:\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 96:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 128:\n    case 129:\n    case 130:\n    case 131:\n    case 132:\n    case 133:\n    case 134:\n    case 135:\n    case 136:\n    case 137:\n    case 138:\n    case 139:\n    case 140:\n    case 141:\n    case 142:\n    case 143:\n    case 192:\n    case 193:\n    case 194:\n    case 195:\n    case 196:\n    case 197:\n    case 198:\n    case 199:\n    case 200:\n    case 201:\n    case 202:\n    case 203:\n    case 204:\n    case 205:\n    case 206:\n    case 207:\n    case 259:\n    case 260:\n    case 262:\n    case 264:\n    case 268:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 32:\n    case 33:\n    case 34:\n    case 35:\n    case 36:\n    case 37:\n    case 38:\n    case 39:\n    case 40:\n    case 41:\n    case 42:\n    case 43:\n    case 44:\n    case 45:\n    case 46:\n    case 47:\n    case 258:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 5);\n            }\n\n            {\n                return 0 + value * (4 - 0);\n            }\n        }\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 91:\n    case 92:\n    case 93:\n    case 94:\n    case 95:\n    case 261:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 11:\n    case 12:\n    case 13:\n    case 14:\n    case 15:\n    case 256:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (127 - 0);\n            }\n        }\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n    case 123:\n    case 124:\n    case 125:\n    case 126:\n    case 127:\n    case 144:\n    case 145:\n    case 146:\n    case 147:\n    case 148:\n    case 149:\n    case 150:\n    case 151:\n    case 152:\n    case 153:\n    case 154:\n    case 155:\n    case 156:\n    case 157:\n    case 158:\n    case 159:\n    case 160:\n    case 161:\n    case 162:\n    case 163:\n    case 164:\n    case 165:\n    case 166:\n    case 167:\n    case 168:\n    case 169:\n    case 170:\n    case 171:\n    case 172:\n    case 173:\n    case 174:\n    case 175:\n    case 176:\n    case 177:\n    case 178:\n    case 179:\n    case 180:\n    case 181:\n    case 182:\n    case 183:\n    case 184:\n    case 185:\n    case 186:\n    case 187:\n    case 188:\n    case 189:\n    case 190:\n    case 191:\n    case 208:\n    case 209:\n    case 210:\n    case 211:\n    case 212:\n    case 213:\n    case 214:\n    case 215:\n    case 216:\n    case 217:\n    case 218:\n    case 219:\n    case 220:\n    case 221:\n    case 222:\n    case 223:\n    case 224:\n    case 225:\n    case 226:\n    case 227:\n    case 228:\n    case 229:\n    case 230:\n    case 231:\n    case 232:\n    case 233:\n    case 234:\n    case 235:\n    case 236:\n    case 237:\n    case 238:\n    case 239:\n    case 263:\n    case 265:\n    case 266:\n    case 267:\n    case 269:\n    case 270:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (5000 - 0);\n            }\n        }\n    case 16:\n    case 17:\n    case 18:\n    case 19:\n    case 20:\n    case 21:\n    case 22:\n    case 23:\n    case 24:\n    case 25:\n    case 26:\n    case 27:\n    case 28:\n    case 29:\n    case 30:\n    case 31:\n    case 257:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 5 + value * (5000 - 5);\n            }\n        }\n    case 240:\n    case 241:\n    case 242:\n    case 243:\n    case 244:\n    case 245:\n    case 246:\n    case 247:\n    case 248:\n    case 249:\n    case 250:\n    case 251:\n    case 252:\n    case 253:\n    case 254:\n    case 255:\n    case 271:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 50 + value * (20000 - 50);\n            }\n        }\n    default:\n        index -= 272;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02[0].getNumParameters()) {\n            {\n                return this.p_02[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 272 + this.p_01.getNumParameters() + this.p_02[0].getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 6:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 7:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 8:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 9:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 10:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 11:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 12:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 13:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 14:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 15:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 16:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 17:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 18:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 19:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 20:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 21:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 22:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 23:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 24:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 25:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 26:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 27:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 28:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 29:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 30:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 31:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 32:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 33:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 34:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 35:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 36:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 37:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 38:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 39:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 40:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 41:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 42:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 43:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 44:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 45:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 46:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 47:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 48:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 49:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 50:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 51:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 52:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 53:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 54:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 55:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 56:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 57:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 58:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 59:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 60:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 61:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 62:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 63:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 64:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 65:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 66:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 67:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 68:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 69:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 70:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 71:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 72:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 73:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 74:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 75:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 76:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 77:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 78:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 79:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 80:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 81:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 82:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 83:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 84:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 85:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 86:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 87:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 88:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 89:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 90:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 91:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 92:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 93:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 94:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 95:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 96:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 97:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 98:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 99:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 100:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 101:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 102:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 103:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 104:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 105:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 106:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 107:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 108:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 109:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 110:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 111:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 112:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 113:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 114:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 115:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 116:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 117:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 118:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 119:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 120:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 121:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 122:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 123:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 124:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 125:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 126:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 127:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 128:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 129:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 130:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 131:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 132:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 133:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 134:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 135:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 136:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 137:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 138:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 139:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 140:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 141:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 142:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 143:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 144:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 145:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 146:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 147:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 148:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 149:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 150:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 151:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 152:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 153:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 154:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 155:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 156:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 157:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 158:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 159:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 160:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 161:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 162:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 163:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 164:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 165:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 166:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 167:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 168:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 169:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 170:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 171:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 172:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 173:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 174:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 175:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 176:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 177:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 178:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 179:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 180:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 181:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 182:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 183:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 184:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 185:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 186:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 187:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 188:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 189:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 190:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 191:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 192:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 193:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 194:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 195:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 196:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 197:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 198:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 199:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 200:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 201:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 202:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 203:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 204:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 205:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 206:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 207:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 208:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 209:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 210:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 211:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 212:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 213:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 214:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 215:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 216:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 217:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 218:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 219:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 220:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 221:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 222:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 223:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 224:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 225:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 226:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 227:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 228:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 229:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 230:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 231:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 232:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 233:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 234:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 235:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 236:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 237:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 238:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 239:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 240:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 241:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 242:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 243:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 244:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 245:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 246:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 247:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 248:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 249:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 250:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 251:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 252:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 253:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 254:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 255:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    case 256:\n        {\n            v = (v > 127 ? 127 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 257:\n        {\n            v = (v > 5000 ? 5000 : (v < 5 ? 5 : v));\n            return v;\n        }\n    case 258:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 259:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 260:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 261:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 262:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 263:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 264:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 265:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 266:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 267:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 268:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 269:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 270:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 271:\n        {\n            v = (v > 20000 ? 20000 : (v < 50 ? 50 : v));\n            return v;\n        }\n    default:\n        index -= 272;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02[0].getNumParameters()) {\n            {\n                return this.p_02[0].constrainParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_01": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_02": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": true
            }
          },
          "isPolyphonic": true
        }
      },
      "isPolyphonic": false
    },
    "presetid": "rnbo",
    "meta": {
      "architecture": "x64",
      "filename": "filter-synth2.maxpat",
      "maxversion": "8.5.1",
      "rnboversion": "1.0.1"
    }
  },
  "presets": [
    {
      "name": "untitled",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            },
            {
              "__sps": {
                "p_obj-71": {},
                "p_obj-76": [
                  {},
                  {}
                ]
              }
            }
          ]
        },
        "a": {
          "value": 10
        },
        "cutoff": {
          "value": 10000
        },
        "d": {
          "value": 100
        },
        "drift": {
          "value": 0.1
        },
        "lag": {
          "value": 10
        },
        "moda": {
          "value": 10
        },
        "modd": {
          "value": 100
        },
        "modr": {
          "value": 1000
        },
        "mods": {
          "value": 0.8
        },
        "n": {
          "value": 48
        },
        "osc": {
          "value": 1
        },
        "pan": {
          "value": 0.5
        },
        "r": {
          "value": 1000
        },
        "res": {
          "value": 0.5
        },
        "s": {
          "value": 0.8
        },
        "vol": {
          "value": 1
        }
      }
    }
  ],
  "src": [
    {
      "code": "",
      "compression": "zlib",
      "encoding": "base64",
      "type": "wasm"
    }
  ]
}