{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeBang",
        "index": 0,
        "name": "message_01_bangval",
        "paramId": "poly/channels[1]/message_obj-40/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s01"
      },
      {
        "type": "ParameterTypeBang",
        "index": 1,
        "name": "message_02_bangval",
        "paramId": "poly/channels[1]/message_obj-32/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s05"
      },
      {
        "type": "ParameterTypeBang",
        "index": 2,
        "name": "message_03_bangval",
        "paramId": "poly/channels[1]/message_obj-34/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s04"
      },
      {
        "type": "ParameterTypeBang",
        "index": 3,
        "name": "message_04_bangval",
        "paramId": "poly/channels[1]/message_obj-36/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s03"
      },
      {
        "type": "ParameterTypeBang",
        "index": 4,
        "name": "message_05_bangval",
        "paramId": "poly/channels[1]/message_obj-35/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s02"
      },
      {
        "type": "ParameterTypeBang",
        "index": 5,
        "name": "message_06_bangval",
        "paramId": "poly/p_obj-15/message_obj-45/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s01"
      },
      {
        "type": "ParameterTypeBang",
        "index": 6,
        "name": "message_07_bangval",
        "paramId": "poly/p_obj-15/message_obj-17/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s02"
      }
    ],
    "numParameters": 7,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 2,
    "numMidiInputPorts": 1,
    "numMidiOutputPorts": 0,
    "externalDataRefs": [
      {
        "id": "b31"
      },
      {
        "id": "b30"
      },
      {
        "id": "b29"
      },
      {
        "id": "b28"
      },
      {
        "id": "b27"
      },
      {
        "id": "b26"
      },
      {
        "id": "b25"
      },
      {
        "id": "b24"
      },
      {
        "id": "b23"
      },
      {
        "id": "b22"
      },
      {
        "id": "b21"
      },
      {
        "id": "b20"
      },
      {
        "id": "b19"
      },
      {
        "id": "b18"
      },
      {
        "id": "b17"
      },
      {
        "id": "b16"
      },
      {
        "id": "b15"
      },
      {
        "id": "b14"
      },
      {
        "id": "b13"
      },
      {
        "id": "b12"
      },
      {
        "id": "b11"
      },
      {
        "id": "b10"
      },
      {
        "id": "b9"
      },
      {
        "id": "b8"
      },
      {
        "id": "b7"
      },
      {
        "id": "b6"
      },
      {
        "id": "b5"
      },
      {
        "id": "b4"
      },
      {
        "id": "b3"
      },
      {
        "id": "b2"
      },
      {
        "id": "b1",
        "file": "blah.wav"
      },
      {
        "id": "b0",
        "file": "drumloop.aif"
      }
    ],
    "patcherSerial": 0,
    "inports": [
      {
        "tag": "i",
        "meta": ""
      },
      {
        "tag": "mutate",
        "meta": ""
      },
      {
        "tag": "a",
        "meta": ""
      },
      {
        "tag": "d",
        "meta": ""
      },
      {
        "tag": "s",
        "meta": ""
      },
      {
        "tag": "r",
        "meta": ""
      },
      {
        "tag": "cut",
        "meta": ""
      },
      {
        "tag": "acurve",
        "meta": ""
      },
      {
        "tag": "dcurve",
        "meta": ""
      },
      {
        "tag": "rcurve",
        "meta": ""
      },
      {
        "tag": "oneshot",
        "meta": ""
      },
      {
        "tag": "dur",
        "meta": ""
      },
      {
        "tag": "vol",
        "meta": ""
      },
      {
        "tag": "_vol",
        "meta": ""
      },
      {
        "tag": "pan",
        "meta": ""
      },
      {
        "tag": "_pan",
        "meta": ""
      },
      {
        "tag": "rate",
        "meta": ""
      },
      {
        "tag": "_rate",
        "meta": ""
      },
      {
        "tag": "_n",
        "meta": ""
      },
      {
        "tag": "snap",
        "meta": ""
      },
      {
        "tag": "_snap",
        "meta": ""
      },
      {
        "tag": "bpm",
        "meta": ""
      },
      {
        "tag": "q",
        "meta": ""
      },
      {
        "tag": "loop",
        "meta": ""
      },
      {
        "tag": "begin",
        "meta": ""
      },
      {
        "tag": "_begin",
        "meta": ""
      },
      {
        "tag": "loopsize",
        "meta": ""
      },
      {
        "tag": "_loopsize",
        "meta": ""
      }
    ],
    "outports": [],
    "inlets": [
      {
        "type": "midi"
      }
    ],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1",
        "meta": ""
      },
      {
        "type": "signal",
        "index": 2,
        "tag": "out2",
        "meta": ""
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "getNumParameters": "function getNumParameters() {\n    return 0 + this.poly[0].getNumParameters();\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].constrainParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "subpatches": {
        "poly": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_29.getNumParameters();\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_29.getNumParameters();\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_22.getNumParameters() + this.p_23.getNumParameters() + this.p_24.getNumParameters() + this.p_25.getNumParameters() + this.p_26.getNumParameters() + this.p_27.getNumParameters() + this.p_28.getNumParameters() + this.p_29.getNumParameters() + this.p_30.getNumParameters() + this.p_31.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.constrainParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.constrainParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.constrainParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.constrainParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.constrainParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.constrainParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.constrainParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.constrainParameterValue(index, value);\n\n        index -= this.p_29.getNumParameters();\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.constrainParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_22": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_01": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_02": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_03": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_23": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_24": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_25": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 5;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_26": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 2;\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 2;\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2 + this.p_04.getNumParameters() + this.p_05.getNumParameters() + this.p_06.getNumParameters() + this.p_07.getNumParameters() + this.p_08.getNumParameters() + this.p_09.getNumParameters() + this.p_10.getNumParameters() + this.p_11.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 2;\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.constrainParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.constrainParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.constrainParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.constrainParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.constrainParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.constrainParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_04": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_05": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_06": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_07": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_08": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_09": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_10": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_11": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_27": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_12.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_12": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_28": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_13.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_13": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_29": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_17.getNumParameters() + this.p_18.getNumParameters() + this.p_19.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.constrainParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.constrainParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_17": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_18": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_14.getNumParameters() + this.p_15.getNumParameters() + this.p_16.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.constrainParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.constrainParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_14": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_15": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_16": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_19": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_30": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_31": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_20.getNumParameters() + this.p_21.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.constrainParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_20": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_21": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            }
          },
          "isPolyphonic": true
        }
      },
      "isPolyphonic": false
    },
    "presetid": "rnbo",
    "meta": {
      "architecture": "x64",
      "filename": "sampler-adr.maxpat",
      "maxversion": "8.5.1",
      "rnboversion": "1.0.2"
    }
  },
  "presets": [
    {
      "name": "untitled",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            },
            {
              "__sps": {
                "channels[1]": {},
                "loop-points": {
                  "__sps": {
                    "mutable": {},
                    "mutable[1]": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-14": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-15": {
                  "__sps": {
                    "dur": {},
                    "settable": {},
                    "settable[1]": {},
                    "settable[2]": {},
                    "settable[3]": {},
                    "settable[4]": {},
                    "settable[5]": {},
                    "settable[6]": {}
                  }
                },
                "p_obj-20": {},
                "p_obj-28": {
                  "__sps": {
                    "mutable": {}
                  }
                },
                "p_obj-29": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-4": {
                  "__sps": {
                    "mutable[1]": {},
                    "mutable[2]": {},
                    "p_obj-8": {
                      "__sps": {
                        "mutable[1]": {},
                        "settable[1]": {},
                        "settable[3]": {}
                      }
                    }
                  }
                },
                "p_obj-6": {}
              }
            }
          ]
        }
      }
    },
    {
      "name": "untitled",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-14": {},
                "p_obj-19": {},
                "p_obj-27": {},
                "p_obj-28": {},
                "p_obj-29": {},
                "p_obj-82": {}
              }
            }
          ]
        }
      }
    },
    {
      "name": "untitled",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            },
            {
              "__sps": {
                "p_obj-102": {
                  "__sps": {
                    "p_obj-6": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-106": {},
                "p_obj-126": {},
                "p_obj-128": {},
                "p_obj-14": {},
                "p_obj-16": {},
                "p_obj-18": {
                  "__sps": {
                    "p_obj-29": {},
                    "p_obj-96": {},
                    "p_obj-97": {}
                  }
                },
                "p_obj-19": {},
                "p_obj-20": {},
                "p_obj-28": {},
                "p_obj-4": {
                  "__sps": {
                    "p_obj-32": {},
                    "p_obj-8": {}
                  }
                },
                "p_obj-82": {}
              }
            }
          ]
        }
      }
    }
  ],
  "src": [
    {
      "code": "",
      "compression": "zlib",
      "encoding": "base64",
      "type": "wasm"
    }
  ]
}